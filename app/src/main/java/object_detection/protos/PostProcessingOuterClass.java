/*
 * Copyright (c) 2020. Kin-Hong Wong. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_detection/protos/post_processing.proto

package object_detection.protos;

public final class PostProcessingOuterClass {
  private PostProcessingOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BatchNonMaxSuppressionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:object_detection.protos.BatchNonMaxSuppression)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Scalar threshold for score (low scoring boxes are removed).
     * </pre>
     *
     * <code>optional float score_threshold = 1 [default = 0];</code>
     * @return Whether the scoreThreshold field is set.
     */
    boolean hasScoreThreshold();
    /**
     * <pre>
     * Scalar threshold for score (low scoring boxes are removed).
     * </pre>
     *
     * <code>optional float score_threshold = 1 [default = 0];</code>
     * @return The scoreThreshold.
     */
    float getScoreThreshold();

    /**
     * <pre>
     * Scalar threshold for IOU (boxes that have high IOU overlap
     * with previously selected boxes are removed).
     * </pre>
     *
     * <code>optional float iou_threshold = 2 [default = 0.6];</code>
     * @return Whether the iouThreshold field is set.
     */
    boolean hasIouThreshold();
    /**
     * <pre>
     * Scalar threshold for IOU (boxes that have high IOU overlap
     * with previously selected boxes are removed).
     * </pre>
     *
     * <code>optional float iou_threshold = 2 [default = 0.6];</code>
     * @return The iouThreshold.
     */
    float getIouThreshold();

    /**
     * <pre>
     * Maximum number of detections to retain per class.
     * </pre>
     *
     * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
     * @return Whether the maxDetectionsPerClass field is set.
     */
    boolean hasMaxDetectionsPerClass();
    /**
     * <pre>
     * Maximum number of detections to retain per class.
     * </pre>
     *
     * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
     * @return The maxDetectionsPerClass.
     */
    int getMaxDetectionsPerClass();

    /**
     * <pre>
     * Maximum number of detections to retain across all classes.
     * </pre>
     *
     * <code>optional int32 max_total_detections = 5 [default = 100];</code>
     * @return Whether the maxTotalDetections field is set.
     */
    boolean hasMaxTotalDetections();
    /**
     * <pre>
     * Maximum number of detections to retain across all classes.
     * </pre>
     *
     * <code>optional int32 max_total_detections = 5 [default = 100];</code>
     * @return The maxTotalDetections.
     */
    int getMaxTotalDetections();

    /**
     * <pre>
     * Whether to use the implementation of NMS that guarantees static shapes.
     * </pre>
     *
     * <code>optional bool use_static_shapes = 6 [default = false];</code>
     * @return Whether the useStaticShapes field is set.
     */
    boolean hasUseStaticShapes();
    /**
     * <pre>
     * Whether to use the implementation of NMS that guarantees static shapes.
     * </pre>
     *
     * <code>optional bool use_static_shapes = 6 [default = false];</code>
     * @return The useStaticShapes.
     */
    boolean getUseStaticShapes();

    /**
     * <pre>
     * Whether to use class agnostic NMS.
     * Class-agnostic NMS function implements a class-agnostic version
     * of Non Maximal Suppression where if max_classes_per_detection=k,
     * 1) we keep the top-k scores for each detection and
     * 2) during NMS, each detection only uses the highest class score for
     * sorting. 3) Compared to regular NMS, the worst runtime of this version is
     * O(N^2) instead of O(KN^2) where N is the number of detections and K the
     * number of classes.
     * </pre>
     *
     * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
     * @return Whether the useClassAgnosticNms field is set.
     */
    boolean hasUseClassAgnosticNms();
    /**
     * <pre>
     * Whether to use class agnostic NMS.
     * Class-agnostic NMS function implements a class-agnostic version
     * of Non Maximal Suppression where if max_classes_per_detection=k,
     * 1) we keep the top-k scores for each detection and
     * 2) during NMS, each detection only uses the highest class score for
     * sorting. 3) Compared to regular NMS, the worst runtime of this version is
     * O(N^2) instead of O(KN^2) where N is the number of detections and K the
     * number of classes.
     * </pre>
     *
     * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
     * @return The useClassAgnosticNms.
     */
    boolean getUseClassAgnosticNms();

    /**
     * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
     * @return Whether the maxClassesPerDetection field is set.
     */
    boolean hasMaxClassesPerDetection();
    /**
     * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
     * @return The maxClassesPerDetection.
     */
    int getMaxClassesPerDetection();

    /**
     * <pre>
     * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
     * </pre>
     *
     * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
     * @return Whether the softNmsSigma field is set.
     */
    boolean hasSoftNmsSigma();
    /**
     * <pre>
     * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
     * </pre>
     *
     * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
     * @return The softNmsSigma.
     */
    float getSoftNmsSigma();

    /**
     * <pre>
     * Whether to use partitioned version of non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
     * @return Whether the usePartitionedNms field is set.
     */
    boolean hasUsePartitionedNms();
    /**
     * <pre>
     * Whether to use partitioned version of non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
     * @return The usePartitionedNms.
     */
    boolean getUsePartitionedNms();

    /**
     * <pre>
     * Whether to use tf.image.combined_non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_combined_nms = 11 [default = false];</code>
     * @return Whether the useCombinedNms field is set.
     */
    boolean hasUseCombinedNms();
    /**
     * <pre>
     * Whether to use tf.image.combined_non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_combined_nms = 11 [default = false];</code>
     * @return The useCombinedNms.
     */
    boolean getUseCombinedNms();

    /**
     * <pre>
     * Whether to change coordinate frame of the boxlist to be relative to
     * window's frame.
     * </pre>
     *
     * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
     * @return Whether the changeCoordinateFrame field is set.
     */
    boolean hasChangeCoordinateFrame();
    /**
     * <pre>
     * Whether to change coordinate frame of the boxlist to be relative to
     * window's frame.
     * </pre>
     *
     * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
     * @return The changeCoordinateFrame.
     */
    boolean getChangeCoordinateFrame();

    /**
     * <pre>
     * Use hard NMS. Note that even if this field is set false, the behavior of
     * NMS will be equivalent to hard NMS; This field when set to true forces the
     * tf.image.non_max_suppression function to be called instead
     * of tf.image.non_max_suppression_with_scores and can be used to
     * export models for older versions of TF.
     * </pre>
     *
     * <code>optional bool use_hard_nms = 13 [default = false];</code>
     * @return Whether the useHardNms field is set.
     */
    boolean hasUseHardNms();
    /**
     * <pre>
     * Use hard NMS. Note that even if this field is set false, the behavior of
     * NMS will be equivalent to hard NMS; This field when set to true forces the
     * tf.image.non_max_suppression function to be called instead
     * of tf.image.non_max_suppression_with_scores and can be used to
     * export models for older versions of TF.
     * </pre>
     *
     * <code>optional bool use_hard_nms = 13 [default = false];</code>
     * @return The useHardNms.
     */
    boolean getUseHardNms();

    /**
     * <pre>
     * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
     * if the model is large and/or batch size is large during training.
     * Setting this flag to false moves the nms op to CPU when OOM happens.
     * The flag is not needed if use_hard_nms = false, as soft NMS currently
     * runs on CPU by default.
     * </pre>
     *
     * <code>optional bool use_cpu_nms = 14 [default = false];</code>
     * @return Whether the useCpuNms field is set.
     */
    boolean hasUseCpuNms();
    /**
     * <pre>
     * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
     * if the model is large and/or batch size is large during training.
     * Setting this flag to false moves the nms op to CPU when OOM happens.
     * The flag is not needed if use_hard_nms = false, as soft NMS currently
     * runs on CPU by default.
     * </pre>
     *
     * <code>optional bool use_cpu_nms = 14 [default = false];</code>
     * @return The useCpuNms.
     */
    boolean getUseCpuNms();
  }
  /**
   * <pre>
   * Configuration proto for non-max-suppression operation on a batch of
   * detections.
   * </pre>
   *
   * Protobuf type {@code object_detection.protos.BatchNonMaxSuppression}
   */
  public static final class BatchNonMaxSuppression extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:object_detection.protos.BatchNonMaxSuppression)
      BatchNonMaxSuppressionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BatchNonMaxSuppression.newBuilder() to construct.
    private BatchNonMaxSuppression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BatchNonMaxSuppression() {
      iouThreshold_ = 0.6F;
      maxDetectionsPerClass_ = 100;
      maxTotalDetections_ = 100;
      maxClassesPerDetection_ = 1;
      changeCoordinateFrame_ = true;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BatchNonMaxSuppression();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BatchNonMaxSuppression(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              scoreThreshold_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              iouThreshold_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxDetectionsPerClass_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              maxTotalDetections_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              useStaticShapes_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              useClassAgnosticNms_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              maxClassesPerDetection_ = input.readInt32();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000080;
              softNmsSigma_ = input.readFloat();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              usePartitionedNms_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              useCombinedNms_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              changeCoordinateFrame_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              useHardNms_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00001000;
              useCpuNms_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_BatchNonMaxSuppression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.class, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder.class);
    }

    private int bitField0_;
    public static final int SCORE_THRESHOLD_FIELD_NUMBER = 1;
    private float scoreThreshold_;
    /**
     * <pre>
     * Scalar threshold for score (low scoring boxes are removed).
     * </pre>
     *
     * <code>optional float score_threshold = 1 [default = 0];</code>
     * @return Whether the scoreThreshold field is set.
     */
    @java.lang.Override
    public boolean hasScoreThreshold() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Scalar threshold for score (low scoring boxes are removed).
     * </pre>
     *
     * <code>optional float score_threshold = 1 [default = 0];</code>
     * @return The scoreThreshold.
     */
    @java.lang.Override
    public float getScoreThreshold() {
      return scoreThreshold_;
    }

    public static final int IOU_THRESHOLD_FIELD_NUMBER = 2;
    private float iouThreshold_;
    /**
     * <pre>
     * Scalar threshold for IOU (boxes that have high IOU overlap
     * with previously selected boxes are removed).
     * </pre>
     *
     * <code>optional float iou_threshold = 2 [default = 0.6];</code>
     * @return Whether the iouThreshold field is set.
     */
    @java.lang.Override
    public boolean hasIouThreshold() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Scalar threshold for IOU (boxes that have high IOU overlap
     * with previously selected boxes are removed).
     * </pre>
     *
     * <code>optional float iou_threshold = 2 [default = 0.6];</code>
     * @return The iouThreshold.
     */
    @java.lang.Override
    public float getIouThreshold() {
      return iouThreshold_;
    }

    public static final int MAX_DETECTIONS_PER_CLASS_FIELD_NUMBER = 3;
    private int maxDetectionsPerClass_;
    /**
     * <pre>
     * Maximum number of detections to retain per class.
     * </pre>
     *
     * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
     * @return Whether the maxDetectionsPerClass field is set.
     */
    @java.lang.Override
    public boolean hasMaxDetectionsPerClass() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Maximum number of detections to retain per class.
     * </pre>
     *
     * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
     * @return The maxDetectionsPerClass.
     */
    @java.lang.Override
    public int getMaxDetectionsPerClass() {
      return maxDetectionsPerClass_;
    }

    public static final int MAX_TOTAL_DETECTIONS_FIELD_NUMBER = 5;
    private int maxTotalDetections_;
    /**
     * <pre>
     * Maximum number of detections to retain across all classes.
     * </pre>
     *
     * <code>optional int32 max_total_detections = 5 [default = 100];</code>
     * @return Whether the maxTotalDetections field is set.
     */
    @java.lang.Override
    public boolean hasMaxTotalDetections() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Maximum number of detections to retain across all classes.
     * </pre>
     *
     * <code>optional int32 max_total_detections = 5 [default = 100];</code>
     * @return The maxTotalDetections.
     */
    @java.lang.Override
    public int getMaxTotalDetections() {
      return maxTotalDetections_;
    }

    public static final int USE_STATIC_SHAPES_FIELD_NUMBER = 6;
    private boolean useStaticShapes_;
    /**
     * <pre>
     * Whether to use the implementation of NMS that guarantees static shapes.
     * </pre>
     *
     * <code>optional bool use_static_shapes = 6 [default = false];</code>
     * @return Whether the useStaticShapes field is set.
     */
    @java.lang.Override
    public boolean hasUseStaticShapes() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Whether to use the implementation of NMS that guarantees static shapes.
     * </pre>
     *
     * <code>optional bool use_static_shapes = 6 [default = false];</code>
     * @return The useStaticShapes.
     */
    @java.lang.Override
    public boolean getUseStaticShapes() {
      return useStaticShapes_;
    }

    public static final int USE_CLASS_AGNOSTIC_NMS_FIELD_NUMBER = 7;
    private boolean useClassAgnosticNms_;
    /**
     * <pre>
     * Whether to use class agnostic NMS.
     * Class-agnostic NMS function implements a class-agnostic version
     * of Non Maximal Suppression where if max_classes_per_detection=k,
     * 1) we keep the top-k scores for each detection and
     * 2) during NMS, each detection only uses the highest class score for
     * sorting. 3) Compared to regular NMS, the worst runtime of this version is
     * O(N^2) instead of O(KN^2) where N is the number of detections and K the
     * number of classes.
     * </pre>
     *
     * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
     * @return Whether the useClassAgnosticNms field is set.
     */
    @java.lang.Override
    public boolean hasUseClassAgnosticNms() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Whether to use class agnostic NMS.
     * Class-agnostic NMS function implements a class-agnostic version
     * of Non Maximal Suppression where if max_classes_per_detection=k,
     * 1) we keep the top-k scores for each detection and
     * 2) during NMS, each detection only uses the highest class score for
     * sorting. 3) Compared to regular NMS, the worst runtime of this version is
     * O(N^2) instead of O(KN^2) where N is the number of detections and K the
     * number of classes.
     * </pre>
     *
     * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
     * @return The useClassAgnosticNms.
     */
    @java.lang.Override
    public boolean getUseClassAgnosticNms() {
      return useClassAgnosticNms_;
    }

    public static final int MAX_CLASSES_PER_DETECTION_FIELD_NUMBER = 8;
    private int maxClassesPerDetection_;
    /**
     * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
     * @return Whether the maxClassesPerDetection field is set.
     */
    @java.lang.Override
    public boolean hasMaxClassesPerDetection() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
     * @return The maxClassesPerDetection.
     */
    @java.lang.Override
    public int getMaxClassesPerDetection() {
      return maxClassesPerDetection_;
    }

    public static final int SOFT_NMS_SIGMA_FIELD_NUMBER = 9;
    private float softNmsSigma_;
    /**
     * <pre>
     * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
     * </pre>
     *
     * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
     * @return Whether the softNmsSigma field is set.
     */
    @java.lang.Override
    public boolean hasSoftNmsSigma() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
     * </pre>
     *
     * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
     * @return The softNmsSigma.
     */
    @java.lang.Override
    public float getSoftNmsSigma() {
      return softNmsSigma_;
    }

    public static final int USE_PARTITIONED_NMS_FIELD_NUMBER = 10;
    private boolean usePartitionedNms_;
    /**
     * <pre>
     * Whether to use partitioned version of non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
     * @return Whether the usePartitionedNms field is set.
     */
    @java.lang.Override
    public boolean hasUsePartitionedNms() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * Whether to use partitioned version of non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
     * @return The usePartitionedNms.
     */
    @java.lang.Override
    public boolean getUsePartitionedNms() {
      return usePartitionedNms_;
    }

    public static final int USE_COMBINED_NMS_FIELD_NUMBER = 11;
    private boolean useCombinedNms_;
    /**
     * <pre>
     * Whether to use tf.image.combined_non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_combined_nms = 11 [default = false];</code>
     * @return Whether the useCombinedNms field is set.
     */
    @java.lang.Override
    public boolean hasUseCombinedNms() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Whether to use tf.image.combined_non_max_suppression.
     * </pre>
     *
     * <code>optional bool use_combined_nms = 11 [default = false];</code>
     * @return The useCombinedNms.
     */
    @java.lang.Override
    public boolean getUseCombinedNms() {
      return useCombinedNms_;
    }

    public static final int CHANGE_COORDINATE_FRAME_FIELD_NUMBER = 12;
    private boolean changeCoordinateFrame_;
    /**
     * <pre>
     * Whether to change coordinate frame of the boxlist to be relative to
     * window's frame.
     * </pre>
     *
     * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
     * @return Whether the changeCoordinateFrame field is set.
     */
    @java.lang.Override
    public boolean hasChangeCoordinateFrame() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Whether to change coordinate frame of the boxlist to be relative to
     * window's frame.
     * </pre>
     *
     * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
     * @return The changeCoordinateFrame.
     */
    @java.lang.Override
    public boolean getChangeCoordinateFrame() {
      return changeCoordinateFrame_;
    }

    public static final int USE_HARD_NMS_FIELD_NUMBER = 13;
    private boolean useHardNms_;
    /**
     * <pre>
     * Use hard NMS. Note that even if this field is set false, the behavior of
     * NMS will be equivalent to hard NMS; This field when set to true forces the
     * tf.image.non_max_suppression function to be called instead
     * of tf.image.non_max_suppression_with_scores and can be used to
     * export models for older versions of TF.
     * </pre>
     *
     * <code>optional bool use_hard_nms = 13 [default = false];</code>
     * @return Whether the useHardNms field is set.
     */
    @java.lang.Override
    public boolean hasUseHardNms() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Use hard NMS. Note that even if this field is set false, the behavior of
     * NMS will be equivalent to hard NMS; This field when set to true forces the
     * tf.image.non_max_suppression function to be called instead
     * of tf.image.non_max_suppression_with_scores and can be used to
     * export models for older versions of TF.
     * </pre>
     *
     * <code>optional bool use_hard_nms = 13 [default = false];</code>
     * @return The useHardNms.
     */
    @java.lang.Override
    public boolean getUseHardNms() {
      return useHardNms_;
    }

    public static final int USE_CPU_NMS_FIELD_NUMBER = 14;
    private boolean useCpuNms_;
    /**
     * <pre>
     * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
     * if the model is large and/or batch size is large during training.
     * Setting this flag to false moves the nms op to CPU when OOM happens.
     * The flag is not needed if use_hard_nms = false, as soft NMS currently
     * runs on CPU by default.
     * </pre>
     *
     * <code>optional bool use_cpu_nms = 14 [default = false];</code>
     * @return Whether the useCpuNms field is set.
     */
    @java.lang.Override
    public boolean hasUseCpuNms() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
     * if the model is large and/or batch size is large during training.
     * Setting this flag to false moves the nms op to CPU when OOM happens.
     * The flag is not needed if use_hard_nms = false, as soft NMS currently
     * runs on CPU by default.
     * </pre>
     *
     * <code>optional bool use_cpu_nms = 14 [default = false];</code>
     * @return The useCpuNms.
     */
    @java.lang.Override
    public boolean getUseCpuNms() {
      return useCpuNms_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFloat(1, scoreThreshold_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFloat(2, iouThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeInt32(3, maxDetectionsPerClass_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeInt32(5, maxTotalDetections_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(6, useStaticShapes_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(7, useClassAgnosticNms_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeInt32(8, maxClassesPerDetection_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeFloat(9, softNmsSigma_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(10, usePartitionedNms_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeBool(11, useCombinedNms_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeBool(12, changeCoordinateFrame_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeBool(13, useHardNms_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeBool(14, useCpuNms_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, scoreThreshold_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, iouThreshold_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxDetectionsPerClass_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, maxTotalDetections_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, useStaticShapes_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, useClassAgnosticNms_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, maxClassesPerDetection_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, softNmsSigma_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, usePartitionedNms_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, useCombinedNms_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, changeCoordinateFrame_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, useHardNms_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, useCpuNms_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression)) {
        return super.equals(obj);
      }
      object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression other = (object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression) obj;

      if (hasScoreThreshold() != other.hasScoreThreshold()) return false;
      if (hasScoreThreshold()) {
        if (java.lang.Float.floatToIntBits(getScoreThreshold())
            != java.lang.Float.floatToIntBits(
                other.getScoreThreshold())) return false;
      }
      if (hasIouThreshold() != other.hasIouThreshold()) return false;
      if (hasIouThreshold()) {
        if (java.lang.Float.floatToIntBits(getIouThreshold())
            != java.lang.Float.floatToIntBits(
                other.getIouThreshold())) return false;
      }
      if (hasMaxDetectionsPerClass() != other.hasMaxDetectionsPerClass()) return false;
      if (hasMaxDetectionsPerClass()) {
        if (getMaxDetectionsPerClass()
            != other.getMaxDetectionsPerClass()) return false;
      }
      if (hasMaxTotalDetections() != other.hasMaxTotalDetections()) return false;
      if (hasMaxTotalDetections()) {
        if (getMaxTotalDetections()
            != other.getMaxTotalDetections()) return false;
      }
      if (hasUseStaticShapes() != other.hasUseStaticShapes()) return false;
      if (hasUseStaticShapes()) {
        if (getUseStaticShapes()
            != other.getUseStaticShapes()) return false;
      }
      if (hasUseClassAgnosticNms() != other.hasUseClassAgnosticNms()) return false;
      if (hasUseClassAgnosticNms()) {
        if (getUseClassAgnosticNms()
            != other.getUseClassAgnosticNms()) return false;
      }
      if (hasMaxClassesPerDetection() != other.hasMaxClassesPerDetection()) return false;
      if (hasMaxClassesPerDetection()) {
        if (getMaxClassesPerDetection()
            != other.getMaxClassesPerDetection()) return false;
      }
      if (hasSoftNmsSigma() != other.hasSoftNmsSigma()) return false;
      if (hasSoftNmsSigma()) {
        if (java.lang.Float.floatToIntBits(getSoftNmsSigma())
            != java.lang.Float.floatToIntBits(
                other.getSoftNmsSigma())) return false;
      }
      if (hasUsePartitionedNms() != other.hasUsePartitionedNms()) return false;
      if (hasUsePartitionedNms()) {
        if (getUsePartitionedNms()
            != other.getUsePartitionedNms()) return false;
      }
      if (hasUseCombinedNms() != other.hasUseCombinedNms()) return false;
      if (hasUseCombinedNms()) {
        if (getUseCombinedNms()
            != other.getUseCombinedNms()) return false;
      }
      if (hasChangeCoordinateFrame() != other.hasChangeCoordinateFrame()) return false;
      if (hasChangeCoordinateFrame()) {
        if (getChangeCoordinateFrame()
            != other.getChangeCoordinateFrame()) return false;
      }
      if (hasUseHardNms() != other.hasUseHardNms()) return false;
      if (hasUseHardNms()) {
        if (getUseHardNms()
            != other.getUseHardNms()) return false;
      }
      if (hasUseCpuNms() != other.hasUseCpuNms()) return false;
      if (hasUseCpuNms()) {
        if (getUseCpuNms()
            != other.getUseCpuNms()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasScoreThreshold()) {
        hash = (37 * hash) + SCORE_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getScoreThreshold());
      }
      if (hasIouThreshold()) {
        hash = (37 * hash) + IOU_THRESHOLD_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIouThreshold());
      }
      if (hasMaxDetectionsPerClass()) {
        hash = (37 * hash) + MAX_DETECTIONS_PER_CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxDetectionsPerClass();
      }
      if (hasMaxTotalDetections()) {
        hash = (37 * hash) + MAX_TOTAL_DETECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getMaxTotalDetections();
      }
      if (hasUseStaticShapes()) {
        hash = (37 * hash) + USE_STATIC_SHAPES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseStaticShapes());
      }
      if (hasUseClassAgnosticNms()) {
        hash = (37 * hash) + USE_CLASS_AGNOSTIC_NMS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseClassAgnosticNms());
      }
      if (hasMaxClassesPerDetection()) {
        hash = (37 * hash) + MAX_CLASSES_PER_DETECTION_FIELD_NUMBER;
        hash = (53 * hash) + getMaxClassesPerDetection();
      }
      if (hasSoftNmsSigma()) {
        hash = (37 * hash) + SOFT_NMS_SIGMA_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSoftNmsSigma());
      }
      if (hasUsePartitionedNms()) {
        hash = (37 * hash) + USE_PARTITIONED_NMS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUsePartitionedNms());
      }
      if (hasUseCombinedNms()) {
        hash = (37 * hash) + USE_COMBINED_NMS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseCombinedNms());
      }
      if (hasChangeCoordinateFrame()) {
        hash = (37 * hash) + CHANGE_COORDINATE_FRAME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getChangeCoordinateFrame());
      }
      if (hasUseHardNms()) {
        hash = (37 * hash) + USE_HARD_NMS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseHardNms());
      }
      if (hasUseCpuNms()) {
        hash = (37 * hash) + USE_CPU_NMS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getUseCpuNms());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration proto for non-max-suppression operation on a batch of
     * detections.
     * </pre>
     *
     * Protobuf type {@code object_detection.protos.BatchNonMaxSuppression}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:object_detection.protos.BatchNonMaxSuppression)
        object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_BatchNonMaxSuppression_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.class, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder.class);
      }

      // Construct using object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        scoreThreshold_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        iouThreshold_ = 0.6F;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxDetectionsPerClass_ = 100;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxTotalDetections_ = 100;
        bitField0_ = (bitField0_ & ~0x00000008);
        useStaticShapes_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        useClassAgnosticNms_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        maxClassesPerDetection_ = 1;
        bitField0_ = (bitField0_ & ~0x00000040);
        softNmsSigma_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        usePartitionedNms_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        useCombinedNms_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        changeCoordinateFrame_ = true;
        bitField0_ = (bitField0_ & ~0x00000400);
        useHardNms_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        useCpuNms_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor;
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getDefaultInstanceForType() {
        return object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance();
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression build() {
        object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression buildPartial() {
        object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression result = new object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.scoreThreshold_ = scoreThreshold_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.iouThreshold_ = iouThreshold_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxDetectionsPerClass_ = maxDetectionsPerClass_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxTotalDetections_ = maxTotalDetections_;
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.useStaticShapes_ = useStaticShapes_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.useClassAgnosticNms_ = useClassAgnosticNms_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          to_bitField0_ |= 0x00000040;
        }
        result.maxClassesPerDetection_ = maxClassesPerDetection_;
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.softNmsSigma_ = softNmsSigma_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.usePartitionedNms_ = usePartitionedNms_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.useCombinedNms_ = useCombinedNms_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          to_bitField0_ |= 0x00000400;
        }
        result.changeCoordinateFrame_ = changeCoordinateFrame_;
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.useHardNms_ = useHardNms_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.useCpuNms_ = useCpuNms_;
          to_bitField0_ |= 0x00001000;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression) {
          return mergeFrom((object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression other) {
        if (other == object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance()) return this;
        if (other.hasScoreThreshold()) {
          setScoreThreshold(other.getScoreThreshold());
        }
        if (other.hasIouThreshold()) {
          setIouThreshold(other.getIouThreshold());
        }
        if (other.hasMaxDetectionsPerClass()) {
          setMaxDetectionsPerClass(other.getMaxDetectionsPerClass());
        }
        if (other.hasMaxTotalDetections()) {
          setMaxTotalDetections(other.getMaxTotalDetections());
        }
        if (other.hasUseStaticShapes()) {
          setUseStaticShapes(other.getUseStaticShapes());
        }
        if (other.hasUseClassAgnosticNms()) {
          setUseClassAgnosticNms(other.getUseClassAgnosticNms());
        }
        if (other.hasMaxClassesPerDetection()) {
          setMaxClassesPerDetection(other.getMaxClassesPerDetection());
        }
        if (other.hasSoftNmsSigma()) {
          setSoftNmsSigma(other.getSoftNmsSigma());
        }
        if (other.hasUsePartitionedNms()) {
          setUsePartitionedNms(other.getUsePartitionedNms());
        }
        if (other.hasUseCombinedNms()) {
          setUseCombinedNms(other.getUseCombinedNms());
        }
        if (other.hasChangeCoordinateFrame()) {
          setChangeCoordinateFrame(other.getChangeCoordinateFrame());
        }
        if (other.hasUseHardNms()) {
          setUseHardNms(other.getUseHardNms());
        }
        if (other.hasUseCpuNms()) {
          setUseCpuNms(other.getUseCpuNms());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float scoreThreshold_ ;
      /**
       * <pre>
       * Scalar threshold for score (low scoring boxes are removed).
       * </pre>
       *
       * <code>optional float score_threshold = 1 [default = 0];</code>
       * @return Whether the scoreThreshold field is set.
       */
      @java.lang.Override
      public boolean hasScoreThreshold() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Scalar threshold for score (low scoring boxes are removed).
       * </pre>
       *
       * <code>optional float score_threshold = 1 [default = 0];</code>
       * @return The scoreThreshold.
       */
      @java.lang.Override
      public float getScoreThreshold() {
        return scoreThreshold_;
      }
      /**
       * <pre>
       * Scalar threshold for score (low scoring boxes are removed).
       * </pre>
       *
       * <code>optional float score_threshold = 1 [default = 0];</code>
       * @param value The scoreThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setScoreThreshold(float value) {
        bitField0_ |= 0x00000001;
        scoreThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Scalar threshold for score (low scoring boxes are removed).
       * </pre>
       *
       * <code>optional float score_threshold = 1 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearScoreThreshold() {
        bitField0_ = (bitField0_ & ~0x00000001);
        scoreThreshold_ = 0F;
        onChanged();
        return this;
      }

      private float iouThreshold_ = 0.6F;
      /**
       * <pre>
       * Scalar threshold for IOU (boxes that have high IOU overlap
       * with previously selected boxes are removed).
       * </pre>
       *
       * <code>optional float iou_threshold = 2 [default = 0.6];</code>
       * @return Whether the iouThreshold field is set.
       */
      @java.lang.Override
      public boolean hasIouThreshold() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Scalar threshold for IOU (boxes that have high IOU overlap
       * with previously selected boxes are removed).
       * </pre>
       *
       * <code>optional float iou_threshold = 2 [default = 0.6];</code>
       * @return The iouThreshold.
       */
      @java.lang.Override
      public float getIouThreshold() {
        return iouThreshold_;
      }
      /**
       * <pre>
       * Scalar threshold for IOU (boxes that have high IOU overlap
       * with previously selected boxes are removed).
       * </pre>
       *
       * <code>optional float iou_threshold = 2 [default = 0.6];</code>
       * @param value The iouThreshold to set.
       * @return This builder for chaining.
       */
      public Builder setIouThreshold(float value) {
        bitField0_ |= 0x00000002;
        iouThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Scalar threshold for IOU (boxes that have high IOU overlap
       * with previously selected boxes are removed).
       * </pre>
       *
       * <code>optional float iou_threshold = 2 [default = 0.6];</code>
       * @return This builder for chaining.
       */
      public Builder clearIouThreshold() {
        bitField0_ = (bitField0_ & ~0x00000002);
        iouThreshold_ = 0.6F;
        onChanged();
        return this;
      }

      private int maxDetectionsPerClass_ = 100;
      /**
       * <pre>
       * Maximum number of detections to retain per class.
       * </pre>
       *
       * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
       * @return Whether the maxDetectionsPerClass field is set.
       */
      @java.lang.Override
      public boolean hasMaxDetectionsPerClass() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Maximum number of detections to retain per class.
       * </pre>
       *
       * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
       * @return The maxDetectionsPerClass.
       */
      @java.lang.Override
      public int getMaxDetectionsPerClass() {
        return maxDetectionsPerClass_;
      }
      /**
       * <pre>
       * Maximum number of detections to retain per class.
       * </pre>
       *
       * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
       * @param value The maxDetectionsPerClass to set.
       * @return This builder for chaining.
       */
      public Builder setMaxDetectionsPerClass(int value) {
        bitField0_ |= 0x00000004;
        maxDetectionsPerClass_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of detections to retain per class.
       * </pre>
       *
       * <code>optional int32 max_detections_per_class = 3 [default = 100];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxDetectionsPerClass() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxDetectionsPerClass_ = 100;
        onChanged();
        return this;
      }

      private int maxTotalDetections_ = 100;
      /**
       * <pre>
       * Maximum number of detections to retain across all classes.
       * </pre>
       *
       * <code>optional int32 max_total_detections = 5 [default = 100];</code>
       * @return Whether the maxTotalDetections field is set.
       */
      @java.lang.Override
      public boolean hasMaxTotalDetections() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Maximum number of detections to retain across all classes.
       * </pre>
       *
       * <code>optional int32 max_total_detections = 5 [default = 100];</code>
       * @return The maxTotalDetections.
       */
      @java.lang.Override
      public int getMaxTotalDetections() {
        return maxTotalDetections_;
      }
      /**
       * <pre>
       * Maximum number of detections to retain across all classes.
       * </pre>
       *
       * <code>optional int32 max_total_detections = 5 [default = 100];</code>
       * @param value The maxTotalDetections to set.
       * @return This builder for chaining.
       */
      public Builder setMaxTotalDetections(int value) {
        bitField0_ |= 0x00000008;
        maxTotalDetections_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Maximum number of detections to retain across all classes.
       * </pre>
       *
       * <code>optional int32 max_total_detections = 5 [default = 100];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxTotalDetections() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxTotalDetections_ = 100;
        onChanged();
        return this;
      }

      private boolean useStaticShapes_ ;
      /**
       * <pre>
       * Whether to use the implementation of NMS that guarantees static shapes.
       * </pre>
       *
       * <code>optional bool use_static_shapes = 6 [default = false];</code>
       * @return Whether the useStaticShapes field is set.
       */
      @java.lang.Override
      public boolean hasUseStaticShapes() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * Whether to use the implementation of NMS that guarantees static shapes.
       * </pre>
       *
       * <code>optional bool use_static_shapes = 6 [default = false];</code>
       * @return The useStaticShapes.
       */
      @java.lang.Override
      public boolean getUseStaticShapes() {
        return useStaticShapes_;
      }
      /**
       * <pre>
       * Whether to use the implementation of NMS that guarantees static shapes.
       * </pre>
       *
       * <code>optional bool use_static_shapes = 6 [default = false];</code>
       * @param value The useStaticShapes to set.
       * @return This builder for chaining.
       */
      public Builder setUseStaticShapes(boolean value) {
        bitField0_ |= 0x00000010;
        useStaticShapes_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to use the implementation of NMS that guarantees static shapes.
       * </pre>
       *
       * <code>optional bool use_static_shapes = 6 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseStaticShapes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        useStaticShapes_ = false;
        onChanged();
        return this;
      }

      private boolean useClassAgnosticNms_ ;
      /**
       * <pre>
       * Whether to use class agnostic NMS.
       * Class-agnostic NMS function implements a class-agnostic version
       * of Non Maximal Suppression where if max_classes_per_detection=k,
       * 1) we keep the top-k scores for each detection and
       * 2) during NMS, each detection only uses the highest class score for
       * sorting. 3) Compared to regular NMS, the worst runtime of this version is
       * O(N^2) instead of O(KN^2) where N is the number of detections and K the
       * number of classes.
       * </pre>
       *
       * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
       * @return Whether the useClassAgnosticNms field is set.
       */
      @java.lang.Override
      public boolean hasUseClassAgnosticNms() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * Whether to use class agnostic NMS.
       * Class-agnostic NMS function implements a class-agnostic version
       * of Non Maximal Suppression where if max_classes_per_detection=k,
       * 1) we keep the top-k scores for each detection and
       * 2) during NMS, each detection only uses the highest class score for
       * sorting. 3) Compared to regular NMS, the worst runtime of this version is
       * O(N^2) instead of O(KN^2) where N is the number of detections and K the
       * number of classes.
       * </pre>
       *
       * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
       * @return The useClassAgnosticNms.
       */
      @java.lang.Override
      public boolean getUseClassAgnosticNms() {
        return useClassAgnosticNms_;
      }
      /**
       * <pre>
       * Whether to use class agnostic NMS.
       * Class-agnostic NMS function implements a class-agnostic version
       * of Non Maximal Suppression where if max_classes_per_detection=k,
       * 1) we keep the top-k scores for each detection and
       * 2) during NMS, each detection only uses the highest class score for
       * sorting. 3) Compared to regular NMS, the worst runtime of this version is
       * O(N^2) instead of O(KN^2) where N is the number of detections and K the
       * number of classes.
       * </pre>
       *
       * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
       * @param value The useClassAgnosticNms to set.
       * @return This builder for chaining.
       */
      public Builder setUseClassAgnosticNms(boolean value) {
        bitField0_ |= 0x00000020;
        useClassAgnosticNms_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to use class agnostic NMS.
       * Class-agnostic NMS function implements a class-agnostic version
       * of Non Maximal Suppression where if max_classes_per_detection=k,
       * 1) we keep the top-k scores for each detection and
       * 2) during NMS, each detection only uses the highest class score for
       * sorting. 3) Compared to regular NMS, the worst runtime of this version is
       * O(N^2) instead of O(KN^2) where N is the number of detections and K the
       * number of classes.
       * </pre>
       *
       * <code>optional bool use_class_agnostic_nms = 7 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseClassAgnosticNms() {
        bitField0_ = (bitField0_ & ~0x00000020);
        useClassAgnosticNms_ = false;
        onChanged();
        return this;
      }

      private int maxClassesPerDetection_ = 1;
      /**
       * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
       * @return Whether the maxClassesPerDetection field is set.
       */
      @java.lang.Override
      public boolean hasMaxClassesPerDetection() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
       * @return The maxClassesPerDetection.
       */
      @java.lang.Override
      public int getMaxClassesPerDetection() {
        return maxClassesPerDetection_;
      }
      /**
       * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
       * @param value The maxClassesPerDetection to set.
       * @return This builder for chaining.
       */
      public Builder setMaxClassesPerDetection(int value) {
        bitField0_ |= 0x00000040;
        maxClassesPerDetection_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_classes_per_detection = 8 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxClassesPerDetection() {
        bitField0_ = (bitField0_ & ~0x00000040);
        maxClassesPerDetection_ = 1;
        onChanged();
        return this;
      }

      private float softNmsSigma_ ;
      /**
       * <pre>
       * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
       * </pre>
       *
       * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
       * @return Whether the softNmsSigma field is set.
       */
      @java.lang.Override
      public boolean hasSoftNmsSigma() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
       * </pre>
       *
       * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
       * @return The softNmsSigma.
       */
      @java.lang.Override
      public float getSoftNmsSigma() {
        return softNmsSigma_;
      }
      /**
       * <pre>
       * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
       * </pre>
       *
       * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
       * @param value The softNmsSigma to set.
       * @return This builder for chaining.
       */
      public Builder setSoftNmsSigma(float value) {
        bitField0_ |= 0x00000080;
        softNmsSigma_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Soft NMS sigma parameter; Bodla et al, https://arxiv.org/abs/1704.04503)
       * </pre>
       *
       * <code>optional float soft_nms_sigma = 9 [default = 0];</code>
       * @return This builder for chaining.
       */
      public Builder clearSoftNmsSigma() {
        bitField0_ = (bitField0_ & ~0x00000080);
        softNmsSigma_ = 0F;
        onChanged();
        return this;
      }

      private boolean usePartitionedNms_ ;
      /**
       * <pre>
       * Whether to use partitioned version of non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
       * @return Whether the usePartitionedNms field is set.
       */
      @java.lang.Override
      public boolean hasUsePartitionedNms() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Whether to use partitioned version of non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
       * @return The usePartitionedNms.
       */
      @java.lang.Override
      public boolean getUsePartitionedNms() {
        return usePartitionedNms_;
      }
      /**
       * <pre>
       * Whether to use partitioned version of non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
       * @param value The usePartitionedNms to set.
       * @return This builder for chaining.
       */
      public Builder setUsePartitionedNms(boolean value) {
        bitField0_ |= 0x00000100;
        usePartitionedNms_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to use partitioned version of non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_partitioned_nms = 10 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUsePartitionedNms() {
        bitField0_ = (bitField0_ & ~0x00000100);
        usePartitionedNms_ = false;
        onChanged();
        return this;
      }

      private boolean useCombinedNms_ ;
      /**
       * <pre>
       * Whether to use tf.image.combined_non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_combined_nms = 11 [default = false];</code>
       * @return Whether the useCombinedNms field is set.
       */
      @java.lang.Override
      public boolean hasUseCombinedNms() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * Whether to use tf.image.combined_non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_combined_nms = 11 [default = false];</code>
       * @return The useCombinedNms.
       */
      @java.lang.Override
      public boolean getUseCombinedNms() {
        return useCombinedNms_;
      }
      /**
       * <pre>
       * Whether to use tf.image.combined_non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_combined_nms = 11 [default = false];</code>
       * @param value The useCombinedNms to set.
       * @return This builder for chaining.
       */
      public Builder setUseCombinedNms(boolean value) {
        bitField0_ |= 0x00000200;
        useCombinedNms_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to use tf.image.combined_non_max_suppression.
       * </pre>
       *
       * <code>optional bool use_combined_nms = 11 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseCombinedNms() {
        bitField0_ = (bitField0_ & ~0x00000200);
        useCombinedNms_ = false;
        onChanged();
        return this;
      }

      private boolean changeCoordinateFrame_ = true;
      /**
       * <pre>
       * Whether to change coordinate frame of the boxlist to be relative to
       * window's frame.
       * </pre>
       *
       * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
       * @return Whether the changeCoordinateFrame field is set.
       */
      @java.lang.Override
      public boolean hasChangeCoordinateFrame() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       * Whether to change coordinate frame of the boxlist to be relative to
       * window's frame.
       * </pre>
       *
       * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
       * @return The changeCoordinateFrame.
       */
      @java.lang.Override
      public boolean getChangeCoordinateFrame() {
        return changeCoordinateFrame_;
      }
      /**
       * <pre>
       * Whether to change coordinate frame of the boxlist to be relative to
       * window's frame.
       * </pre>
       *
       * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
       * @param value The changeCoordinateFrame to set.
       * @return This builder for chaining.
       */
      public Builder setChangeCoordinateFrame(boolean value) {
        bitField0_ |= 0x00000400;
        changeCoordinateFrame_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether to change coordinate frame of the boxlist to be relative to
       * window's frame.
       * </pre>
       *
       * <code>optional bool change_coordinate_frame = 12 [default = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearChangeCoordinateFrame() {
        bitField0_ = (bitField0_ & ~0x00000400);
        changeCoordinateFrame_ = true;
        onChanged();
        return this;
      }

      private boolean useHardNms_ ;
      /**
       * <pre>
       * Use hard NMS. Note that even if this field is set false, the behavior of
       * NMS will be equivalent to hard NMS; This field when set to true forces the
       * tf.image.non_max_suppression function to be called instead
       * of tf.image.non_max_suppression_with_scores and can be used to
       * export models for older versions of TF.
       * </pre>
       *
       * <code>optional bool use_hard_nms = 13 [default = false];</code>
       * @return Whether the useHardNms field is set.
       */
      @java.lang.Override
      public boolean hasUseHardNms() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       * Use hard NMS. Note that even if this field is set false, the behavior of
       * NMS will be equivalent to hard NMS; This field when set to true forces the
       * tf.image.non_max_suppression function to be called instead
       * of tf.image.non_max_suppression_with_scores and can be used to
       * export models for older versions of TF.
       * </pre>
       *
       * <code>optional bool use_hard_nms = 13 [default = false];</code>
       * @return The useHardNms.
       */
      @java.lang.Override
      public boolean getUseHardNms() {
        return useHardNms_;
      }
      /**
       * <pre>
       * Use hard NMS. Note that even if this field is set false, the behavior of
       * NMS will be equivalent to hard NMS; This field when set to true forces the
       * tf.image.non_max_suppression function to be called instead
       * of tf.image.non_max_suppression_with_scores and can be used to
       * export models for older versions of TF.
       * </pre>
       *
       * <code>optional bool use_hard_nms = 13 [default = false];</code>
       * @param value The useHardNms to set.
       * @return This builder for chaining.
       */
      public Builder setUseHardNms(boolean value) {
        bitField0_ |= 0x00000800;
        useHardNms_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use hard NMS. Note that even if this field is set false, the behavior of
       * NMS will be equivalent to hard NMS; This field when set to true forces the
       * tf.image.non_max_suppression function to be called instead
       * of tf.image.non_max_suppression_with_scores and can be used to
       * export models for older versions of TF.
       * </pre>
       *
       * <code>optional bool use_hard_nms = 13 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseHardNms() {
        bitField0_ = (bitField0_ & ~0x00000800);
        useHardNms_ = false;
        onChanged();
        return this;
      }

      private boolean useCpuNms_ ;
      /**
       * <pre>
       * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
       * if the model is large and/or batch size is large during training.
       * Setting this flag to false moves the nms op to CPU when OOM happens.
       * The flag is not needed if use_hard_nms = false, as soft NMS currently
       * runs on CPU by default.
       * </pre>
       *
       * <code>optional bool use_cpu_nms = 14 [default = false];</code>
       * @return Whether the useCpuNms field is set.
       */
      @java.lang.Override
      public boolean hasUseCpuNms() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
       * if the model is large and/or batch size is large during training.
       * Setting this flag to false moves the nms op to CPU when OOM happens.
       * The flag is not needed if use_hard_nms = false, as soft NMS currently
       * runs on CPU by default.
       * </pre>
       *
       * <code>optional bool use_cpu_nms = 14 [default = false];</code>
       * @return The useCpuNms.
       */
      @java.lang.Override
      public boolean getUseCpuNms() {
        return useCpuNms_;
      }
      /**
       * <pre>
       * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
       * if the model is large and/or batch size is large during training.
       * Setting this flag to false moves the nms op to CPU when OOM happens.
       * The flag is not needed if use_hard_nms = false, as soft NMS currently
       * runs on CPU by default.
       * </pre>
       *
       * <code>optional bool use_cpu_nms = 14 [default = false];</code>
       * @param value The useCpuNms to set.
       * @return This builder for chaining.
       */
      public Builder setUseCpuNms(boolean value) {
        bitField0_ |= 0x00001000;
        useCpuNms_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Use cpu NMS. NMSV3/NMSV4 by default runs on GPU, which may cause OOM issue
       * if the model is large and/or batch size is large during training.
       * Setting this flag to false moves the nms op to CPU when OOM happens.
       * The flag is not needed if use_hard_nms = false, as soft NMS currently
       * runs on CPU by default.
       * </pre>
       *
       * <code>optional bool use_cpu_nms = 14 [default = false];</code>
       * @return This builder for chaining.
       */
      public Builder clearUseCpuNms() {
        bitField0_ = (bitField0_ & ~0x00001000);
        useCpuNms_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:object_detection.protos.BatchNonMaxSuppression)
    }

    // @@protoc_insertion_point(class_scope:object_detection.protos.BatchNonMaxSuppression)
    private static final object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression();
    }

    public static object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<BatchNonMaxSuppression>
        PARSER = new com.google.protobuf.AbstractParser<BatchNonMaxSuppression>() {
      @java.lang.Override
      public BatchNonMaxSuppression parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BatchNonMaxSuppression(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BatchNonMaxSuppression> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BatchNonMaxSuppression> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PostProcessingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:object_detection.protos.PostProcessing)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     * @return Whether the batchNonMaxSuppression field is set.
     */
    boolean hasBatchNonMaxSuppression();
    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     * @return The batchNonMaxSuppression.
     */
    object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getBatchNonMaxSuppression();
    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     */
    object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder getBatchNonMaxSuppressionOrBuilder();

    /**
     * <pre>
     * Score converter to use.
     * </pre>
     *
     * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
     * @return Whether the scoreConverter field is set.
     */
    boolean hasScoreConverter();
    /**
     * <pre>
     * Score converter to use.
     * </pre>
     *
     * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
     * @return The scoreConverter.
     */
    object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter getScoreConverter();

    /**
     * <pre>
     * Scale logit (input) value before conversion in post-processing step.
     * Typically used for softmax distillation, though can be used to scale for
     * other reasons.
     * </pre>
     *
     * <code>optional float logit_scale = 3 [default = 1];</code>
     * @return Whether the logitScale field is set.
     */
    boolean hasLogitScale();
    /**
     * <pre>
     * Scale logit (input) value before conversion in post-processing step.
     * Typically used for softmax distillation, though can be used to scale for
     * other reasons.
     * </pre>
     *
     * <code>optional float logit_scale = 3 [default = 1];</code>
     * @return The logitScale.
     */
    float getLogitScale();

    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     * @return Whether the calibrationConfig field is set.
     */
    boolean hasCalibrationConfig();
    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     * @return The calibrationConfig.
     */
    object_detection.protos.Calibration.CalibrationConfig getCalibrationConfig();
    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     */
    object_detection.protos.Calibration.CalibrationConfigOrBuilder getCalibrationConfigOrBuilder();
  }
  /**
   * <pre>
   * Configuration proto for post-processing predicted boxes and
   * scores.
   * </pre>
   *
   * Protobuf type {@code object_detection.protos.PostProcessing}
   */
  public static final class PostProcessing extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:object_detection.protos.PostProcessing)
      PostProcessingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PostProcessing.newBuilder() to construct.
    private PostProcessing(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PostProcessing() {
      scoreConverter_ = 0;
      logitScale_ = 1F;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PostProcessing();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PostProcessing(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = batchNonMaxSuppression_.toBuilder();
              }
              batchNonMaxSuppression_ = input.readMessage(object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(batchNonMaxSuppression_);
                batchNonMaxSuppression_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter value = object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                scoreConverter_ = rawValue;
              }
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              logitScale_ = input.readFloat();
              break;
            }
            case 34: {
              object_detection.protos.Calibration.CalibrationConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) != 0)) {
                subBuilder = calibrationConfig_.toBuilder();
              }
              calibrationConfig_ = input.readMessage(object_detection.protos.Calibration.CalibrationConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(calibrationConfig_);
                calibrationConfig_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_PostProcessing_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_PostProcessing_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              object_detection.protos.PostProcessingOuterClass.PostProcessing.class, object_detection.protos.PostProcessingOuterClass.PostProcessing.Builder.class);
    }

    /**
     * <pre>
     * Enum to specify how to convert the detection scores.
     * </pre>
     *
     * Protobuf enum {@code object_detection.protos.PostProcessing.ScoreConverter}
     */
    public enum ScoreConverter
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Input scores equals output scores.
       * </pre>
       *
       * <code>IDENTITY = 0;</code>
       */
      IDENTITY(0),
      /**
       * <pre>
       * Applies a sigmoid on input scores.
       * </pre>
       *
       * <code>SIGMOID = 1;</code>
       */
      SIGMOID(1),
      /**
       * <pre>
       * Applies a softmax on input scores
       * </pre>
       *
       * <code>SOFTMAX = 2;</code>
       */
      SOFTMAX(2),
      ;

      /**
       * <pre>
       * Input scores equals output scores.
       * </pre>
       *
       * <code>IDENTITY = 0;</code>
       */
      public static final int IDENTITY_VALUE = 0;
      /**
       * <pre>
       * Applies a sigmoid on input scores.
       * </pre>
       *
       * <code>SIGMOID = 1;</code>
       */
      public static final int SIGMOID_VALUE = 1;
      /**
       * <pre>
       * Applies a softmax on input scores
       * </pre>
       *
       * <code>SOFTMAX = 2;</code>
       */
      public static final int SOFTMAX_VALUE = 2;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScoreConverter valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ScoreConverter forNumber(int value) {
        switch (value) {
          case 0: return IDENTITY;
          case 1: return SIGMOID;
          case 2: return SOFTMAX;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ScoreConverter>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ScoreConverter> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ScoreConverter>() {
              public ScoreConverter findValueByNumber(int number) {
                return ScoreConverter.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return object_detection.protos.PostProcessingOuterClass.PostProcessing.getDescriptor().getEnumTypes().get(0);
      }

      private static final ScoreConverter[] VALUES = values();

      public static ScoreConverter valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ScoreConverter(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:object_detection.protos.PostProcessing.ScoreConverter)
    }

    private int bitField0_;
    public static final int BATCH_NON_MAX_SUPPRESSION_FIELD_NUMBER = 1;
    private object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression batchNonMaxSuppression_;
    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     * @return Whether the batchNonMaxSuppression field is set.
     */
    @java.lang.Override
    public boolean hasBatchNonMaxSuppression() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     * @return The batchNonMaxSuppression.
     */
    @java.lang.Override
    public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getBatchNonMaxSuppression() {
      return batchNonMaxSuppression_ == null ? object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance() : batchNonMaxSuppression_;
    }
    /**
     * <pre>
     * Non max suppression parameters.
     * </pre>
     *
     * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
     */
    @java.lang.Override
    public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder getBatchNonMaxSuppressionOrBuilder() {
      return batchNonMaxSuppression_ == null ? object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance() : batchNonMaxSuppression_;
    }

    public static final int SCORE_CONVERTER_FIELD_NUMBER = 2;
    private int scoreConverter_;
    /**
     * <pre>
     * Score converter to use.
     * </pre>
     *
     * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
     * @return Whether the scoreConverter field is set.
     */
    @java.lang.Override public boolean hasScoreConverter() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Score converter to use.
     * </pre>
     *
     * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
     * @return The scoreConverter.
     */
    @java.lang.Override public object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter getScoreConverter() {
      @SuppressWarnings("deprecation")
      object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter result = object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter.valueOf(scoreConverter_);
      return result == null ? object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter.IDENTITY : result;
    }

    public static final int LOGIT_SCALE_FIELD_NUMBER = 3;
    private float logitScale_;
    /**
     * <pre>
     * Scale logit (input) value before conversion in post-processing step.
     * Typically used for softmax distillation, though can be used to scale for
     * other reasons.
     * </pre>
     *
     * <code>optional float logit_scale = 3 [default = 1];</code>
     * @return Whether the logitScale field is set.
     */
    @java.lang.Override
    public boolean hasLogitScale() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Scale logit (input) value before conversion in post-processing step.
     * Typically used for softmax distillation, though can be used to scale for
     * other reasons.
     * </pre>
     *
     * <code>optional float logit_scale = 3 [default = 1];</code>
     * @return The logitScale.
     */
    @java.lang.Override
    public float getLogitScale() {
      return logitScale_;
    }

    public static final int CALIBRATION_CONFIG_FIELD_NUMBER = 4;
    private object_detection.protos.Calibration.CalibrationConfig calibrationConfig_;
    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     * @return Whether the calibrationConfig field is set.
     */
    @java.lang.Override
    public boolean hasCalibrationConfig() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     * @return The calibrationConfig.
     */
    @java.lang.Override
    public object_detection.protos.Calibration.CalibrationConfig getCalibrationConfig() {
      return calibrationConfig_ == null ? object_detection.protos.Calibration.CalibrationConfig.getDefaultInstance() : calibrationConfig_;
    }
    /**
     * <pre>
     * Calibrate score outputs. Calibration is applied after score converter
     * and before non max suppression.
     * </pre>
     *
     * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
     */
    @java.lang.Override
    public object_detection.protos.Calibration.CalibrationConfigOrBuilder getCalibrationConfigOrBuilder() {
      return calibrationConfig_ == null ? object_detection.protos.Calibration.CalibrationConfig.getDefaultInstance() : calibrationConfig_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getBatchNonMaxSuppression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, scoreConverter_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeFloat(3, logitScale_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getCalibrationConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBatchNonMaxSuppression());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, scoreConverter_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, logitScale_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCalibrationConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof object_detection.protos.PostProcessingOuterClass.PostProcessing)) {
        return super.equals(obj);
      }
      object_detection.protos.PostProcessingOuterClass.PostProcessing other = (object_detection.protos.PostProcessingOuterClass.PostProcessing) obj;

      if (hasBatchNonMaxSuppression() != other.hasBatchNonMaxSuppression()) return false;
      if (hasBatchNonMaxSuppression()) {
        if (!getBatchNonMaxSuppression()
            .equals(other.getBatchNonMaxSuppression())) return false;
      }
      if (hasScoreConverter() != other.hasScoreConverter()) return false;
      if (hasScoreConverter()) {
        if (scoreConverter_ != other.scoreConverter_) return false;
      }
      if (hasLogitScale() != other.hasLogitScale()) return false;
      if (hasLogitScale()) {
        if (java.lang.Float.floatToIntBits(getLogitScale())
            != java.lang.Float.floatToIntBits(
                other.getLogitScale())) return false;
      }
      if (hasCalibrationConfig() != other.hasCalibrationConfig()) return false;
      if (hasCalibrationConfig()) {
        if (!getCalibrationConfig()
            .equals(other.getCalibrationConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBatchNonMaxSuppression()) {
        hash = (37 * hash) + BATCH_NON_MAX_SUPPRESSION_FIELD_NUMBER;
        hash = (53 * hash) + getBatchNonMaxSuppression().hashCode();
      }
      if (hasScoreConverter()) {
        hash = (37 * hash) + SCORE_CONVERTER_FIELD_NUMBER;
        hash = (53 * hash) + scoreConverter_;
      }
      if (hasLogitScale()) {
        hash = (37 * hash) + LOGIT_SCALE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getLogitScale());
      }
      if (hasCalibrationConfig()) {
        hash = (37 * hash) + CALIBRATION_CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getCalibrationConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static object_detection.protos.PostProcessingOuterClass.PostProcessing parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(object_detection.protos.PostProcessingOuterClass.PostProcessing prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Configuration proto for post-processing predicted boxes and
     * scores.
     * </pre>
     *
     * Protobuf type {@code object_detection.protos.PostProcessing}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:object_detection.protos.PostProcessing)
        object_detection.protos.PostProcessingOuterClass.PostProcessingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_PostProcessing_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_PostProcessing_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                object_detection.protos.PostProcessingOuterClass.PostProcessing.class, object_detection.protos.PostProcessingOuterClass.PostProcessing.Builder.class);
      }

      // Construct using object_detection.protos.PostProcessingOuterClass.PostProcessing.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBatchNonMaxSuppressionFieldBuilder();
          getCalibrationConfigFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (batchNonMaxSuppressionBuilder_ == null) {
          batchNonMaxSuppression_ = null;
        } else {
          batchNonMaxSuppressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        scoreConverter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        logitScale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (calibrationConfigBuilder_ == null) {
          calibrationConfig_ = null;
        } else {
          calibrationConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return object_detection.protos.PostProcessingOuterClass.internal_static_object_detection_protos_PostProcessing_descriptor;
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.PostProcessing getDefaultInstanceForType() {
        return object_detection.protos.PostProcessingOuterClass.PostProcessing.getDefaultInstance();
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.PostProcessing build() {
        object_detection.protos.PostProcessingOuterClass.PostProcessing result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.PostProcessing buildPartial() {
        object_detection.protos.PostProcessingOuterClass.PostProcessing result = new object_detection.protos.PostProcessingOuterClass.PostProcessing(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          if (batchNonMaxSuppressionBuilder_ == null) {
            result.batchNonMaxSuppression_ = batchNonMaxSuppression_;
          } else {
            result.batchNonMaxSuppression_ = batchNonMaxSuppressionBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scoreConverter_ = scoreConverter_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          to_bitField0_ |= 0x00000004;
        }
        result.logitScale_ = logitScale_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          if (calibrationConfigBuilder_ == null) {
            result.calibrationConfig_ = calibrationConfig_;
          } else {
            result.calibrationConfig_ = calibrationConfigBuilder_.build();
          }
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof object_detection.protos.PostProcessingOuterClass.PostProcessing) {
          return mergeFrom((object_detection.protos.PostProcessingOuterClass.PostProcessing)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(object_detection.protos.PostProcessingOuterClass.PostProcessing other) {
        if (other == object_detection.protos.PostProcessingOuterClass.PostProcessing.getDefaultInstance()) return this;
        if (other.hasBatchNonMaxSuppression()) {
          mergeBatchNonMaxSuppression(other.getBatchNonMaxSuppression());
        }
        if (other.hasScoreConverter()) {
          setScoreConverter(other.getScoreConverter());
        }
        if (other.hasLogitScale()) {
          setLogitScale(other.getLogitScale());
        }
        if (other.hasCalibrationConfig()) {
          mergeCalibrationConfig(other.getCalibrationConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        object_detection.protos.PostProcessingOuterClass.PostProcessing parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (object_detection.protos.PostProcessingOuterClass.PostProcessing) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression batchNonMaxSuppression_;
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder> batchNonMaxSuppressionBuilder_;
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       * @return Whether the batchNonMaxSuppression field is set.
       */
      public boolean hasBatchNonMaxSuppression() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       * @return The batchNonMaxSuppression.
       */
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression getBatchNonMaxSuppression() {
        if (batchNonMaxSuppressionBuilder_ == null) {
          return batchNonMaxSuppression_ == null ? object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance() : batchNonMaxSuppression_;
        } else {
          return batchNonMaxSuppressionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public Builder setBatchNonMaxSuppression(object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression value) {
        if (batchNonMaxSuppressionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          batchNonMaxSuppression_ = value;
          onChanged();
        } else {
          batchNonMaxSuppressionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public Builder setBatchNonMaxSuppression(
          object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder builderForValue) {
        if (batchNonMaxSuppressionBuilder_ == null) {
          batchNonMaxSuppression_ = builderForValue.build();
          onChanged();
        } else {
          batchNonMaxSuppressionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public Builder mergeBatchNonMaxSuppression(object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression value) {
        if (batchNonMaxSuppressionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
              batchNonMaxSuppression_ != null &&
              batchNonMaxSuppression_ != object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance()) {
            batchNonMaxSuppression_ =
              object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.newBuilder(batchNonMaxSuppression_).mergeFrom(value).buildPartial();
          } else {
            batchNonMaxSuppression_ = value;
          }
          onChanged();
        } else {
          batchNonMaxSuppressionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public Builder clearBatchNonMaxSuppression() {
        if (batchNonMaxSuppressionBuilder_ == null) {
          batchNonMaxSuppression_ = null;
          onChanged();
        } else {
          batchNonMaxSuppressionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder getBatchNonMaxSuppressionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getBatchNonMaxSuppressionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      public object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder getBatchNonMaxSuppressionOrBuilder() {
        if (batchNonMaxSuppressionBuilder_ != null) {
          return batchNonMaxSuppressionBuilder_.getMessageOrBuilder();
        } else {
          return batchNonMaxSuppression_ == null ?
              object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.getDefaultInstance() : batchNonMaxSuppression_;
        }
      }
      /**
       * <pre>
       * Non max suppression parameters.
       * </pre>
       *
       * <code>optional .object_detection.protos.BatchNonMaxSuppression batch_non_max_suppression = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder>
          getBatchNonMaxSuppressionFieldBuilder() {
        if (batchNonMaxSuppressionBuilder_ == null) {
          batchNonMaxSuppressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppression.Builder, object_detection.protos.PostProcessingOuterClass.BatchNonMaxSuppressionOrBuilder>(
                  getBatchNonMaxSuppression(),
                  getParentForChildren(),
                  isClean());
          batchNonMaxSuppression_ = null;
        }
        return batchNonMaxSuppressionBuilder_;
      }

      private int scoreConverter_ = 0;
      /**
       * <pre>
       * Score converter to use.
       * </pre>
       *
       * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
       * @return Whether the scoreConverter field is set.
       */
      @java.lang.Override public boolean hasScoreConverter() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Score converter to use.
       * </pre>
       *
       * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
       * @return The scoreConverter.
       */
      @java.lang.Override
      public object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter getScoreConverter() {
        @SuppressWarnings("deprecation")
        object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter result = object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter.valueOf(scoreConverter_);
        return result == null ? object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter.IDENTITY : result;
      }
      /**
       * <pre>
       * Score converter to use.
       * </pre>
       *
       * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
       * @param value The scoreConverter to set.
       * @return This builder for chaining.
       */
      public Builder setScoreConverter(object_detection.protos.PostProcessingOuterClass.PostProcessing.ScoreConverter value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        scoreConverter_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Score converter to use.
       * </pre>
       *
       * <code>optional .object_detection.protos.PostProcessing.ScoreConverter score_converter = 2 [default = IDENTITY];</code>
       * @return This builder for chaining.
       */
      public Builder clearScoreConverter() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scoreConverter_ = 0;
        onChanged();
        return this;
      }

      private float logitScale_ = 1F;
      /**
       * <pre>
       * Scale logit (input) value before conversion in post-processing step.
       * Typically used for softmax distillation, though can be used to scale for
       * other reasons.
       * </pre>
       *
       * <code>optional float logit_scale = 3 [default = 1];</code>
       * @return Whether the logitScale field is set.
       */
      @java.lang.Override
      public boolean hasLogitScale() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * Scale logit (input) value before conversion in post-processing step.
       * Typically used for softmax distillation, though can be used to scale for
       * other reasons.
       * </pre>
       *
       * <code>optional float logit_scale = 3 [default = 1];</code>
       * @return The logitScale.
       */
      @java.lang.Override
      public float getLogitScale() {
        return logitScale_;
      }
      /**
       * <pre>
       * Scale logit (input) value before conversion in post-processing step.
       * Typically used for softmax distillation, though can be used to scale for
       * other reasons.
       * </pre>
       *
       * <code>optional float logit_scale = 3 [default = 1];</code>
       * @param value The logitScale to set.
       * @return This builder for chaining.
       */
      public Builder setLogitScale(float value) {
        bitField0_ |= 0x00000004;
        logitScale_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Scale logit (input) value before conversion in post-processing step.
       * Typically used for softmax distillation, though can be used to scale for
       * other reasons.
       * </pre>
       *
       * <code>optional float logit_scale = 3 [default = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearLogitScale() {
        bitField0_ = (bitField0_ & ~0x00000004);
        logitScale_ = 1F;
        onChanged();
        return this;
      }

      private object_detection.protos.Calibration.CalibrationConfig calibrationConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.Calibration.CalibrationConfig, object_detection.protos.Calibration.CalibrationConfig.Builder, object_detection.protos.Calibration.CalibrationConfigOrBuilder> calibrationConfigBuilder_;
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       * @return Whether the calibrationConfig field is set.
       */
      public boolean hasCalibrationConfig() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       * @return The calibrationConfig.
       */
      public object_detection.protos.Calibration.CalibrationConfig getCalibrationConfig() {
        if (calibrationConfigBuilder_ == null) {
          return calibrationConfig_ == null ? object_detection.protos.Calibration.CalibrationConfig.getDefaultInstance() : calibrationConfig_;
        } else {
          return calibrationConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public Builder setCalibrationConfig(object_detection.protos.Calibration.CalibrationConfig value) {
        if (calibrationConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          calibrationConfig_ = value;
          onChanged();
        } else {
          calibrationConfigBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public Builder setCalibrationConfig(
          object_detection.protos.Calibration.CalibrationConfig.Builder builderForValue) {
        if (calibrationConfigBuilder_ == null) {
          calibrationConfig_ = builderForValue.build();
          onChanged();
        } else {
          calibrationConfigBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public Builder mergeCalibrationConfig(object_detection.protos.Calibration.CalibrationConfig value) {
        if (calibrationConfigBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
              calibrationConfig_ != null &&
              calibrationConfig_ != object_detection.protos.Calibration.CalibrationConfig.getDefaultInstance()) {
            calibrationConfig_ =
              object_detection.protos.Calibration.CalibrationConfig.newBuilder(calibrationConfig_).mergeFrom(value).buildPartial();
          } else {
            calibrationConfig_ = value;
          }
          onChanged();
        } else {
          calibrationConfigBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public Builder clearCalibrationConfig() {
        if (calibrationConfigBuilder_ == null) {
          calibrationConfig_ = null;
          onChanged();
        } else {
          calibrationConfigBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public object_detection.protos.Calibration.CalibrationConfig.Builder getCalibrationConfigBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getCalibrationConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      public object_detection.protos.Calibration.CalibrationConfigOrBuilder getCalibrationConfigOrBuilder() {
        if (calibrationConfigBuilder_ != null) {
          return calibrationConfigBuilder_.getMessageOrBuilder();
        } else {
          return calibrationConfig_ == null ?
              object_detection.protos.Calibration.CalibrationConfig.getDefaultInstance() : calibrationConfig_;
        }
      }
      /**
       * <pre>
       * Calibrate score outputs. Calibration is applied after score converter
       * and before non max suppression.
       * </pre>
       *
       * <code>optional .object_detection.protos.CalibrationConfig calibration_config = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          object_detection.protos.Calibration.CalibrationConfig, object_detection.protos.Calibration.CalibrationConfig.Builder, object_detection.protos.Calibration.CalibrationConfigOrBuilder>
          getCalibrationConfigFieldBuilder() {
        if (calibrationConfigBuilder_ == null) {
          calibrationConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              object_detection.protos.Calibration.CalibrationConfig, object_detection.protos.Calibration.CalibrationConfig.Builder, object_detection.protos.Calibration.CalibrationConfigOrBuilder>(
                  getCalibrationConfig(),
                  getParentForChildren(),
                  isClean());
          calibrationConfig_ = null;
        }
        return calibrationConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:object_detection.protos.PostProcessing)
    }

    // @@protoc_insertion_point(class_scope:object_detection.protos.PostProcessing)
    private static final object_detection.protos.PostProcessingOuterClass.PostProcessing DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new object_detection.protos.PostProcessingOuterClass.PostProcessing();
    }

    public static object_detection.protos.PostProcessingOuterClass.PostProcessing getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<PostProcessing>
        PARSER = new com.google.protobuf.AbstractParser<PostProcessing>() {
      @java.lang.Override
      public PostProcessing parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PostProcessing(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PostProcessing> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PostProcessing> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public object_detection.protos.PostProcessingOuterClass.PostProcessing getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_object_detection_protos_BatchNonMaxSuppression_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_object_detection_protos_PostProcessing_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_object_detection_protos_PostProcessing_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-object_detection/protos/post_processin" +
      "g.proto\022\027object_detection.protos\032)object" +
      "_detection/protos/calibration.proto\"\311\003\n\026" +
      "BatchNonMaxSuppression\022\032\n\017score_threshol" +
      "d\030\001 \001(\002:\0010\022\032\n\riou_threshold\030\002 \001(\002:\0030.6\022%" +
      "\n\030max_detections_per_class\030\003 \001(\005:\003100\022!\n" +
      "\024max_total_detections\030\005 \001(\005:\003100\022 \n\021use_" +
      "static_shapes\030\006 \001(\010:\005false\022%\n\026use_class_" +
      "agnostic_nms\030\007 \001(\010:\005false\022$\n\031max_classes" +
      "_per_detection\030\010 \001(\005:\0011\022\031\n\016soft_nms_sigm" +
      "a\030\t \001(\002:\0010\022\"\n\023use_partitioned_nms\030\n \001(\010:" +
      "\005false\022\037\n\020use_combined_nms\030\013 \001(\010:\005false\022" +
      "%\n\027change_coordinate_frame\030\014 \001(\010:\004true\022\033" +
      "\n\014use_hard_nms\030\r \001(\010:\005false\022\032\n\013use_cpu_n" +
      "ms\030\016 \001(\010:\005false\"\331\002\n\016PostProcessing\022R\n\031ba" +
      "tch_non_max_suppression\030\001 \001(\0132/.object_d" +
      "etection.protos.BatchNonMaxSuppression\022Y" +
      "\n\017score_converter\030\002 \001(\01626.object_detecti" +
      "on.protos.PostProcessing.ScoreConverter:" +
      "\010IDENTITY\022\026\n\013logit_scale\030\003 \001(\002:\0011\022F\n\022cal" +
      "ibration_config\030\004 \001(\0132*.object_detection" +
      ".protos.CalibrationConfig\"8\n\016ScoreConver" +
      "ter\022\014\n\010IDENTITY\020\000\022\013\n\007SIGMOID\020\001\022\013\n\007SOFTMA" +
      "X\020\002"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          object_detection.protos.Calibration.getDescriptor(),
        });
    internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_object_detection_protos_BatchNonMaxSuppression_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_object_detection_protos_BatchNonMaxSuppression_descriptor,
        new java.lang.String[] { "ScoreThreshold", "IouThreshold", "MaxDetectionsPerClass", "MaxTotalDetections", "UseStaticShapes", "UseClassAgnosticNms", "MaxClassesPerDetection", "SoftNmsSigma", "UsePartitionedNms", "UseCombinedNms", "ChangeCoordinateFrame", "UseHardNms", "UseCpuNms", });
    internal_static_object_detection_protos_PostProcessing_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_object_detection_protos_PostProcessing_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_object_detection_protos_PostProcessing_descriptor,
        new java.lang.String[] { "BatchNonMaxSuppression", "ScoreConverter", "LogitScale", "CalibrationConfig", });
    object_detection.protos.Calibration.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
